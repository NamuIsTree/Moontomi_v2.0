[{"/home/ubuntu/moontomi/src/index.js":"1","/home/ubuntu/moontomi/src/App.js":"2","/home/ubuntu/moontomi/src/containers/Home.js":"3","/home/ubuntu/moontomi/src/containers/Eval.js":"4","/home/ubuntu/moontomi/src/containers/Upload.js":"5","/home/ubuntu/moontomi/src/components/Header.js":"6","/home/ubuntu/moontomi/src/containers/RegularEval.js":"7","/home/ubuntu/moontomi/src/components/BigText.js":"8","/home/ubuntu/moontomi/src/containers/AlbumUpload.js":"9","/home/ubuntu/moontomi/src/containers/CommentPost.js":"10","/home/ubuntu/moontomi/src/containers/Lookup.js":"11","/home/ubuntu/moontomi/src/components/Banner.js":"12","/home/ubuntu/moontomi/src/containers/CommentEdit.js":"13","/home/ubuntu/moontomi/src/containers/ReviewTab.js":"14"},{"size":930,"mtime":1614312051912,"results":"15","hashOfConfig":"16"},{"size":684,"mtime":1611214990294,"results":"17","hashOfConfig":"16"},{"size":6084,"mtime":1614921272917,"results":"18","hashOfConfig":"16"},{"size":2227,"mtime":1610379400575,"results":"19","hashOfConfig":"16"},{"size":2463,"mtime":1611817254035,"results":"20","hashOfConfig":"16"},{"size":1314,"mtime":1642044721648,"results":"21","hashOfConfig":"16"},{"size":34096,"mtime":1671287427063,"results":"22","hashOfConfig":"16"},{"size":217,"mtime":1610379400439,"results":"23","hashOfConfig":"16"},{"size":4593,"mtime":1611815385156,"results":"24","hashOfConfig":"16"},{"size":14425,"mtime":1652531074433,"results":"25","hashOfConfig":"16"},{"size":13135,"mtime":1615175138878,"results":"26","hashOfConfig":"16"},{"size":968,"mtime":1618238526479,"results":"27","hashOfConfig":"16"},{"size":0,"mtime":1611660012425,"results":"28","hashOfConfig":"16"},{"size":66628,"mtime":1615175237091,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"phz4lw",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"/home/ubuntu/moontomi/src/index.js",[],["62","63"],"/home/ubuntu/moontomi/src/App.js",[],"/home/ubuntu/moontomi/src/containers/Home.js",[],"/home/ubuntu/moontomi/src/containers/Eval.js",[],"/home/ubuntu/moontomi/src/containers/Upload.js",[],"/home/ubuntu/moontomi/src/components/Header.js",[],"/home/ubuntu/moontomi/src/containers/RegularEval.js",["64"],"import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Filter1Icon from '@material-ui/icons/Filter1';\r\nimport Filter2Icon from '@material-ui/icons/Filter2';\r\nimport Filter3Icon from '@material-ui/icons/Filter3';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nimport Marquee from 'react-fast-marquee';\r\nimport './RegularEval.css'\r\n\r\nclass RegularEval extends React.Component {\r\n    state = {\r\n        isLoading: true,\r\n        albums: [],\r\n        comments: [],\r\n        isModalOpen: false,\r\n        ModalIndex: 0,\r\n        ModalStar: 0,\r\n        ModalBest1: 0,\r\n        ModalBest2: 0,\r\n        ModalBest3: 0,\r\n        ModalHashedPassword: '',\r\n        ModalPassword: '',\r\n        ModalComment: '',\r\n        album_id: 0,\r\n        album_artist: '',\r\n        album_genre: '',\r\n        album_name: '',\r\n        album_nation: '',\r\n        album_list: [],\r\n        album_year: 0,\r\n        album_isOpen: false,\r\n        album_comments: [],\r\n        rating: 0.0,\r\n\ttag: 'title',\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleValueChange = this.handleValueChange.bind(this);\r\n        this.handleUpdateAlbum = this.handleUpdateAlbum.bind(this);\r\n        this.handleOpenComment = this.handleOpenComment.bind(this);\r\n        this.handleCheckPassword = this.handleCheckPassword.bind(this);\r\n    }\r\n\r\n    handleOpenComment(event, index) {\r\n        try {\r\n            let InstantComment = this.state.album_comments;\r\n            InstantComment[index].isOpen = 1;\r\n            this.setState({album_comments: InstantComment});\r\n        } catch(e) {}\r\n    }\r\n\r\n    handleEditComment = async () => {\r\n        const { album_comments, ModalIndex, ModalStar, ModalBest1, ModalBest2, ModalBest3, ModalComment} = this.state;\r\n        const obj = {\r\n            id : album_comments[ModalIndex].id,\r\n            star: ModalStar,\r\n            best1: ModalBest1,\r\n            best2: ModalBest2,\r\n            best3: ModalBest3,\r\n            comment: ModalComment\r\n        };\r\n\r\n        alert('평가 수정이 완료되었습니다.');\r\n        const response = await axios.post('http://3.35.178.151:8080/api/change/comment', obj);\r\n        console.log(response);\r\n    }\r\n\r\n    handleCheckPassword = async (event) => {\r\n        const obj = {\r\n            password: this.state.ModalPassword\r\n        }\r\n        const response = await axios.post('http://3.35.178.151:8080/api/check/password', obj);\r\n\r\n        const targetHashedPassword = this.state.album_comments[this.state.ModalIndex].password;\r\n        if (targetHashedPassword !== response.data) {\r\n            alert('비밀번호가 틀렸습니다.');\r\n        }\r\n        else alert('비밀번호가 확인되었습니다.\\n수정 완료 버튼을 눌러 평가 수정을 진행해주세요.\\n평가 수정 버튼을 누른 후, 새로 고침 한 번 부탁드립니다.')\r\n\r\n        this.setState({ModalHashedPassword: response.data});\r\n    }\r\n\r\n    openModal = (index) => {\r\n        const {album_comments} = this.state;\r\n        console.log(index);\r\n        const star = album_comments[index].star;\r\n        const best1 = album_comments[index].best1;\r\n        const best2 = album_comments[index].best2;\r\n        const best3 = album_comments[index].best3;\r\n        const comment = album_comments[index].comment;\r\n\r\n        this.setState({\r\n            isModalOpen: true,\r\n            ModalIndex: index,\r\n            ModalStar: star,\r\n            ModalBest1: best1,\r\n            ModalBest2: best2,\r\n            ModalBest3: best3,\r\n            ModalPassword: '',\r\n            ModalHashedPassword: '',\r\n            ModalComment: comment\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.setState({\r\n            isModalOpen: false\r\n        });\r\n    }\r\n\r\n    handleValueChange(event) {\r\n\tlet ntag = 'title';\r\n        if (event.target.value > this.state.albums.length) event.target.value = this.state.albums.length;\r\n        if (event.target.value < 1) event.target.value = 1;\r\n\tif (event.target.value === 50 || event.target.value === '50') {\r\n\t\tntag = 'special';\r\n\t}\r\n\tif (event.target.value === 100 || event.target.value === '100') {\r\n\t        ntag = 'special-tilt';\r\n\t}\r\n\r\n        var name, artist, genre, nation, year, list, isOpen, comments, rating;\r\n\r\n        comments = this.state.comments.filter(comment => comment.album_id === parseInt(event.target.value));\r\n\r\n        this.state.albums.forEach(album => {\r\n            if (album.id === parseInt(event.target.value)) {\r\n                    name = album.name;\r\n                    artist = album.artist;\r\n                    genre = album.genre;\r\n                    nation = album.nation;\r\n                    year = album.year;\r\n                    list = album.list.split('\\n');\r\n                    isOpen = album.isOpen;\r\n                    rating = album.rating;\r\n            }\r\n        })\r\n\r\n        comments.forEach(comment => {\r\n            comment.isOpen = isOpen;\r\n        })\r\n\r\n        this.setState({\r\n            album_id: event.target.value,\r\n            album_name: name,\r\n            album_artist: artist,\r\n            album_genre: genre,\r\n            album_nation: nation,\r\n            album_year: year,\r\n            album_list: list,\r\n            album_comments: comments,\r\n            rating: rating,\r\n\t    tag: ntag\r\n        });\r\n    }\r\n\r\n    updateAlbum = async () => {\r\n        let pw = prompt(\"관리자 비밀번호를 입력해 주세요.\");\r\n        if (pw === process.env.REACT_APP_ADMIN_PASSWORD) {\r\n            const {album_id, rating} = this.state;\r\n            const url = 'http://3.35.178.151:8080/api/change/album';\r\n            const obj = {\r\n                id: album_id,\r\n                rating: rating\r\n            };\r\n            const response = await axios.post(url, obj);\r\n            console.log(response);\r\n            alert('업데이트 되었습니다.');\r\n        }\r\n        else {\r\n            alert('비밀번호가 틀렸습니다.');\r\n        }\r\n    }\r\n\r\n    handleUpdateAlbum(event) {\r\n        event.preventDefault();\r\n\r\n        if (window.confirm(\"정말 업데이트하시겠습니까?\") === true) {\r\n            this.updateAlbum()\r\n            .then((response) => {\r\n                console.log(response);\r\n            })\r\n\r\n            var target_id = this.state.albums.length + 1 - this.state.album_id;\r\n            document.location.href = '/evaluate/' + target_id;\r\n        }\r\n    }\r\n\r\n    getAlbums = async () => {\r\n        const album = await axios.post('http://3.35.178.151:8080/api/get/albums/all');\r\n        var id;\r\n\r\n        if (isNaN(this.props.routeParams.id) === false) {\r\n            id = Math.ceil(parseInt(this.props.routeParams.id));\r\n            if (id < 1) id = 1;\r\n            else if (id > album.data.length) id = album.data.length;\r\n        }\r\n        else id = 1;\r\n\r\n\tlet tag = 'title';\r\n\tif (album.data.length + 1 - id  === 50) {\r\n\t\ttag = 'special';\r\n\t}\r\n  if (album.data.length + 1 - id === 100) {\r\n    tag = 'special-tilt';\r\n  }\r\n        this.setState({\r\n            album_id: album.data.length + 1 - id,\r\n            album_name: album.data[album.data.length - id].name,\r\n            album_artist: album.data[album.data.length - id].artist,\r\n            album_genre: album.data[album.data.length - id].genre,\r\n            album_nation: album.data[album.data.length - id].nation,\r\n            album_year: album.data[album.data.length - id].year,\r\n            album_list: album.data[album.data.length - id].list.split('\\n'),\r\n            album_isOpen: album.data[album.data.length - id].isOpen,\r\n            albums: album.data,\r\n\t    tag: tag\r\n        })\r\n    }\r\n\r\n    getComments = async () => {\r\n        const comment = await axios.post('http://3.35.178.151:8080/api/get/comments/all');\r\n        var album_comments = comment.data.filter(c => c.album_id === parseInt(this.state.album_id));\r\n\r\n        album_comments.forEach(comment => {\r\n            comment.isOpen = this.state.album_isOpen;\r\n        })\r\n\r\n        this.setState({\r\n            comments: comment.data,\r\n            album_comments: album_comments,\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAlbums();\r\n        this.getComments();\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, isModalOpen, ModalIndex, album_id, album_name,\r\n            ModalStar, ModalBest1, ModalBest2, ModalBest3, ModalComment, ModalPassword, ModalHashedPassword, \r\n            album_genre, album_comments, album_list} = this.state;\r\n        const imgsrc = \"http://3.35.178.151:3000/images/covers/\" + album_id + \".jpg\";\r\n        \r\n        var i, genrelist = [], genre = String(album_genre);\r\n        for (i = 0; i < genre.length; i++) {\r\n            var gi = '';\r\n            switch (genre.charAt(i)) {\r\n                case '1' :  gi = 'POP'; break;\r\n                case '2' :  gi = 'R&B/Soul'; break;\r\n                case '3' :  gi = 'Rock'; break;\r\n                case '4' :  gi = 'J-POP'; break;\r\n                case '5' :  gi = 'Jazz'; break;\r\n                case '6' :  gi = 'HipHop'; break;\r\n                case '7' :  gi = 'Electronic'; break;\r\n                default  :  gi = 'Others'; break;\r\n            }\r\n            genrelist.push(gi);\r\n        }\r\n\r\n        var InstantData = [], total_preference = 0.0, total_rating = 0.0, cnt = 0;\r\n        for (i = 0; i < album_list.length; i++)\r\n            InstantData.push({ name: album_list[i], preference: 0.0 });\r\n        \r\n        album_comments.forEach(comment => {\r\n            if (comment.isOpen === 1) {\r\n                InstantData[comment.best1].preference += comment.star;\r\n                InstantData[comment.best2].preference += comment.star * 0.7;\r\n                InstantData[comment.best3].preference += comment.star * 0.5;\r\n                total_preference += comment.star * 2.2;\r\n                total_rating += comment.star;\r\n                cnt += 1;\r\n            }\r\n        })\r\n\r\n        if (cnt !== 0) total_rating /= cnt;\r\n        else total_rating = 0.0;\r\n\r\n        if (total_rating !== this.state.rating)\r\n            this.setState({rating: total_rating});\r\n\r\n        InstantData.sort(function(a, b) {\r\n            return b.preference - a.preference;\r\n        })\r\n\r\n        var labels = [], data = [], top_preference = 0.0;\r\n        InstantData.forEach(instant => {\r\n            if (labels.length < 3) {\r\n                labels.push(instant.name);\r\n                data.push(instant.preference.toFixed(2));\r\n                top_preference += instant.preference;\r\n            }\r\n        })\r\n\r\n        var res = total_preference - top_preference;\r\n        labels.push(\"Others\");\r\n        data.push(res.toFixed(2));\r\n\r\n        console.log(this.state.tag);\r\n\r\n        return (\r\n            <div className=\"regular-evaluation\">\r\n                {isLoading ? (\r\n                    <div className=\"loader\">\r\n                        Loading Data...\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"regular-evaluation-container\">\r\n                        <div className=\"regular-evaluation-title\">\r\n                            <TextField\r\n                                type=\"number\"\r\n                                value={album_id}\r\n                                className=\"regular-evaluation-count\"\r\n                                inputProps={{\r\n                                    pattern: '[0-9]*'\r\n                                }}\r\n\t\t\t\tstyle={{backgroundColor: 'white', zIndex: '10'}}\r\n                                name=\"album_id\"\r\n                                onChange={this.handleValueChange}\r\n                            />\r\n\t\t            <span className={this.state.tag}>\r\n\t\t\t    {this.state.tag === 'special' ? \"회★정기★음평회\" : this.state.tag === 'special-tilt' ? \"회★경71★%લ્લુ回\": \"회 정기 음평회\"}\r\n\t\t\t    </span>\r\n\t\t\t    <br/>\r\n                        </div>\r\n                        <div className=\"evaluation-album-title\">\r\n                            {album_name}\r\n                        </div>\r\n                        <div className=\"evaluation-album-artist\">\r\n                            [{this.state.album_artist}]의 {this.state.album_year}년도 앨범\r\n                        </div>\r\n                        <div className=\"genre-chips\">\r\n                        { genrelist.map((g, index) => {\r\n                            return (<Chip key={index} size=\"small\" label={g} variant=\"outlined\" style={{ marginRight: \"0.5rem\" }}/>);\r\n                        })}\r\n                        </div>\r\n                        <div className=\"album-information\">\r\n                            <div className=\"regular-evaluation-image\">\r\n                                <img src={imgsrc} alt=\"album cover\"/>\r\n                            </div>\r\n                            <div className=\"regular-evaluation-analysis\">\r\n                                <div className=\"regular-evaluation-chart\">\r\n                                    트랙별 선호도 Chart (Top3) <br/> <br/>\r\n                                <Doughnut\r\n                                    options={{\r\n                                        legend: {\r\n                                            display: true,\r\n                                            position: \"bottom\"\r\n                                        }\r\n                                    }}\r\n                                    data = {{\r\n                                        labels: labels,\r\n                                        datasets: [\r\n                                            {\r\n                                                labels: labels,\r\n                                                data: data,\r\n                                                borderWidth: 2,\r\n                                                backgroundColor: [\r\n                                                    \"rgba(238, 102, 121, 1)\",\r\n                                                    \"rgba(98, 181, 229, 1)\",\r\n                                                    \"rgba(255, 198, 0, 1)\",\r\n                                                    \"rgba(0, 0, 0, 0.8)\"\r\n                                                ],\r\n                                                fill: true\r\n                                            }\r\n                                        ] \r\n                                    }}\r\n                                />\r\n                                </div>\r\n                                <div className=\"regular-evaluation-rating\">\r\n                                    ★{total_rating.toFixed(1) + '     '}     \r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#2e8b57', color: '#ffffff' }}\r\n                                        onClick={this.handleUpdateAlbum}\r\n                                    >\r\n                                        UPDATE\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"album-comments-container\">\r\n                            {album_comments.map((comment, index) => {\r\n                                return (\r\n                                    <div key= {comment.id} className=\"album-comment\">\r\n                                        <IconButton\r\n                                                aria-label=\"edit comment\"\r\n                                                className=\"edit-button\"\r\n                                                onClick={(event) => {\r\n                                                    this.openModal(index);\r\n                                                }}\r\n                                                style={{\r\n                                                    marginTop: '-0.5rem'\r\n                                                }}\r\n                                            >\r\n                                            <EditRoundedIcon />\r\n                                        </IconButton>\r\n                                        <span className=\"album-comment-name\">\r\n                                            [{comment.nickname}]\r\n                                        </span>\r\n                                        <span className=\"album-comment-name-additional\">\r\n                                            님의 평가입니다. (#{comment.id})\r\n                                            <Modal\r\n                                                open={isModalOpen}\r\n                                                onClose={this.closeModal}\r\n                                                style={{\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'center',\r\n                                                }}\r\n                                            >\r\n                                                <Fade \r\n                                                    in={isModalOpen}\r\n                                                    style={{\r\n                                                        backgroundColor: 'white',\r\n                                                        border: '2px solid #000',\r\n                                                        width: '30%',\r\n                                                        padding: '3rem'\r\n                                                    }}\r\n                                                >\r\n                                                    <div className=\"modal-edit-comment\">\r\n                                                        <center>\r\n                                                            평가 수정(#{album_comments[ModalIndex].id}) <br/> <br/>\r\n                                                            [{album_comments[ModalIndex].nickname}]님의 평가를 수정합니다. <br/> <br/>\r\n                                                            1. 평점 (별 하나당 0.5점)<br/> <br/>\r\n                                                            <Rating\r\n                                                                name=\"star-rating\"\r\n                                                                size=\"large\"\r\n                                                                value={ModalStar}\r\n                                                                precision={1}\r\n                                                                max={10}\r\n                                                                onChange={(event, newValue) => {\r\n                                                                    this.setState({ModalStar: newValue})\r\n                                                                }}\r\n                                                            /> <br/> <br/>\r\n\r\n                                                            2. BEST 3 <br/> <br/>\r\n                                                            <Autocomplete\r\n                                                                id=\"combo-box-best1\"\r\n                                                                className=\"combo-box-best1\"\r\n                                                                fullWidth={true}\r\n                                                                options={album_list}\r\n                                                                getOptionLabel={(option) => option}\r\n                                                                value={album_list[ModalBest1]}\r\n                                                                renderInput={(params) => <TextField {...params} style={{textAlign: 'center'}} value={params.id} label=\"Best1\" variant=\"outlined\" />}\r\n                                                                onChange={(event, newValue)=> {\r\n                                                                    try {\r\n                                                                        const idx = album_list.indexOf(newValue);\r\n                                                                        this.setState({ModalBest1: idx});\r\n                                                                    } catch(e) {}\r\n                                                                }}\r\n                                                            /> <br/>\r\n                                                            <Autocomplete\r\n                                                                id=\"combo-box-best2\"\r\n                                                                className=\"combo-box-best2\"\r\n                                                                fullWidth={true}\r\n                                                                options={album_list}\r\n                                                                getOptionLabel={(option) => option}\r\n                                                                value={album_list[ModalBest2]}\r\n                                                                renderInput={(params) => <TextField {...params} style={{textAlign: 'center'}} value={params.id} label=\"Best1\" variant=\"outlined\" />}\r\n                                                                onChange={(event, newValue)=> {\r\n                                                                    try {\r\n                                                                        const idx = album_list.indexOf(newValue);\r\n                                                                        this.setState({ModalBest2: idx});\r\n                                                                    } catch(e) {}\r\n                                                                }}\r\n                                                            /> <br/>\r\n                                                            <Autocomplete\r\n                                                                id=\"combo-box-best3\"\r\n                                                                className=\"combo-box-best3\"\r\n                                                                fullWidth={true}\r\n                                                                options={album_list}\r\n                                                                getOptionLabel={(option) => option}\r\n                                                                value={album_list[ModalBest3]}\r\n                                                                renderInput={(params) => <TextField {...params} style={{textAlign: 'center'}} value={params.id} label=\"Best1\" variant=\"outlined\" />}\r\n                                                                onChange={(event, newValue)=> {\r\n                                                                    try {\r\n                                                                        const idx = album_list.indexOf(newValue);\r\n                                                                        this.setState({ModalBest3: idx});\r\n                                                                    } catch(e) {}\r\n                                                                }}\r\n                                                            /> <br/>\r\n                                                            3. 한줄평 <br/> <br/>\r\n                                                            <TextField\r\n                                                                fullWidth={true}\r\n                                                                multiline\r\n                                                                variant=\"outlined\"\r\n                                                                rows={4}\r\n                                                                value={ModalComment}\r\n                                                                onChange={(event)=> {\r\n                                                                    try {\r\n                                                                        this.setState({ModalComment: event.target.value});\r\n                                                                    } catch(e) {}\r\n                                                                }}\r\n                                                            /> <br/> <br/>\r\n                                                            4. 비밀번호 <br/> <br/>\r\n                                                            <TextField\r\n                                                                label=\"비밀번호\"\r\n                                                                required\r\n                                                                variant=\"outlined\"\r\n                                                                value={ModalPassword}\r\n                                                                onChange={(event) => {\r\n                                                                    try {\r\n                                                                        this.setState({ModalPassword: event.target.value});\r\n                                                                    } catch(e) {}\r\n                                                                }}\r\n                                                            /> \r\n                                                            <br/> <br/>\r\n                                                            <Button\r\n                                                                color=\"primary\"\r\n                                                                variant=\"contained\"\r\n                                                                onClick={this.handleCheckPassword}\r\n                                                            >\r\n                                                                비밀번호 확인\r\n                                                            </Button>\r\n                                                            <Button\r\n                                                                color=\"secondary\"\r\n                                                                variant=\"contained\"\r\n                                                                disabled={(ModalHashedPassword === album_comments[ModalIndex].password) ? false : true}\r\n                                                                style={{ marginLeft:'0.5rem' }}\r\n                                                                onClick={this.handleEditComment}\r\n                                                            >\r\n                                                                수정 완료\r\n                                                            </Button>\r\n                                                        </center>\r\n                                                    </div>\r\n                                                </Fade>\r\n                                            </Modal>\r\n                                        </span>\r\n                                        <div className=\"comment-detail\">\r\n                                        { comment.isOpen === 1 ? (\r\n                                            <div className=\"opened-comment\">\r\n                                                <div className=\"album-comment-rating\">\r\n                                                    <Rating name=\"rating-star\" value={comment.star / 2} precision={0.5} readOnly />\r\n                                                </div>\r\n                                                <div className=\"best-3\">\r\n                                                    <List>\r\n                                                        Top 3\r\n                                                        <ListItem\r\n                                                            dense={true}\r\n                                                        >\r\n                                                            <ListItemIcon>\r\n                                                                <Filter1Icon style={{ color: '#ffb400' }} />\r\n                                                            </ListItemIcon>\r\n                                                            <ListItemText>\r\n                                                                <span className=\"best1\">\r\n                                                                    {album_list[comment.best1]}\r\n                                                                </span>\r\n                                                            </ListItemText>\r\n                                                        </ListItem>\r\n                                                        <ListItem\r\n                                                            dense={true}\r\n                                                        >\r\n                                                            <ListItemIcon>\r\n                                                                <Filter2Icon style={{ color: '4a4f5a' }} />\r\n                                                            </ListItemIcon>\r\n                                                            <ListItemText>\r\n                                                                <span className=\"best2\">\r\n                                                                    {album_list[comment.best2]}\r\n                                                                </span>\r\n                                                            </ListItemText>\r\n                                                        </ListItem>\r\n                                                        <ListItem\r\n                                                            dense={true}\r\n                                                        >\r\n                                                            <ListItemIcon>\r\n                                                                <Filter3Icon style={{ color: '6e3732' }} />\r\n                                                            </ListItemIcon>\r\n                                                            <ListItemText>\r\n                                                                <span className=\"best3\">\r\n                                                                    {album_list[comment.best3]}\r\n                                                                </span>\r\n                                                            </ListItemText>\r\n                                                        </ListItem>\r\n                                                    </List>\r\n                                                </div>\r\n                                                <div className=\"one-line-comment\">\r\n                                                    <span className=\"one-line-comment-detail\">\r\n                                                        {'<'}앨범 한줄평{'>'}\r\n                                                    </span>\r\n                                                    <br/> <br/>\r\n                                                    <span className=\"one-line-comment-text\">\r\n                                                        {comment.comment}\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n                                            ) : (\r\n                                                <div className=\"not-opened-comment\">\r\n                                                    <center>\r\n                                                        <br/>다른 사람의 평가를 미리 보지 않도록 합시다.<br/>\r\n                                                        <br/>\r\n                                                        <Button\r\n                                                            variant=\"contained\"\r\n                                                            color=\"primary\"\r\n                                                            className=\"open-button\"\r\n                                                            startIcon={<LockOpenIcon />}\r\n                                                            onClick={(event) => {\r\n                                                                console.log(index);\r\n                                                                this.handleOpenComment(event, index);\r\n                                                            }}\r\n                                                        >\r\n                                                            OPEN\r\n                                                        </Button>\r\n                                                    </center>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RegularEval;\r\n","/home/ubuntu/moontomi/src/components/BigText.js",[],["65","66"],"/home/ubuntu/moontomi/src/containers/AlbumUpload.js",[],"/home/ubuntu/moontomi/src/containers/CommentPost.js",[],"/home/ubuntu/moontomi/src/containers/Lookup.js",[],"/home/ubuntu/moontomi/src/components/Banner.js",[],"/home/ubuntu/moontomi/src/containers/CommentEdit.js",[],"/home/ubuntu/moontomi/src/containers/ReviewTab.js",[],["67","68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":23,"column":8,"nodeType":"75","messageId":"76","endLine":23,"endColumn":15},{"ruleId":"69","replacedBy":"77"},{"ruleId":"71","replacedBy":"78"},{"ruleId":"69","replacedBy":"79"},{"ruleId":"71","replacedBy":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'Marquee' is defined but never used.","Identifier","unusedVar",["81"],["82"],["81"],["82"],"no-global-assign","no-unsafe-negation"]